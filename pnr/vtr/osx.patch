diff --git a/ODIN_II/SRC/odin_ii.cpp b/ODIN_II/SRC/odin_ii.cpp
index 0450944cc..44d4fca94 100644
--- a/ODIN_II/SRC/odin_ii.cpp
+++ b/ODIN_II/SRC/odin_ii.cpp
@@ -250,7 +250,7 @@ netlist_t* start_odin_ii(int argc, char** argv) {
 
     /* read the FPGA architecture file */
     if (global_args.arch_file.provenance() == argparse::Provenance::SPECIFIED) {
-        printf("Architecture: %s\n", basename(global_args.arch_file.value().c_str()));
+        printf("Architecture: %s\n", vtr::basename(global_args.arch_file.value()).c_str());
         fflush(stdout);
 
         printf("Reading FPGA Architecture file\n");
@@ -267,7 +267,7 @@ netlist_t* start_odin_ii(int argc, char** argv) {
     /* do High level Synthesis */
     if (!configuration.list_of_file_names.empty() && configuration.is_verilog_input) {
         for (std::string v_file : global_args.verilog_files.value()) {
-            printf("Verilog: %s\n", basename(v_file.c_str()));
+            printf("Verilog: %s\n", vtr::basename(v_file).c_str());
         }
         fflush(stdout);
 
@@ -294,7 +294,7 @@ netlist_t* start_odin_ii(int argc, char** argv) {
             configuration.list_of_file_names = {global_args.output_file};
             current_parse_file = 0;
         } else {
-            printf("Blif: %s\n", basename(global_args.blif_file.value().c_str()));
+            printf("Blif: %s\n", vtr::basename(global_args.blif_file.value()).c_str());
             fflush(stdout);
         }
 
diff --git a/ODIN_II/SRC/parse_making_ast.cpp b/ODIN_II/SRC/parse_making_ast.cpp
index 87a4e8a5d..08df306bc 100644
--- a/ODIN_II/SRC/parse_making_ast.cpp
+++ b/ODIN_II/SRC/parse_making_ast.cpp
@@ -38,6 +38,7 @@
 #include "hard_blocks.h"
 #include "vtr_util.h"
 #include "vtr_memory.h"
+#include "vtr_path.h"
 
 #include "scope_util.h"
 
diff --git a/libs/libvtrutil/src/vtr_logic.h b/libs/libvtrutil/src/vtr_logic.h
index 2287f3383..91733374e 100644
--- a/libs/libvtrutil/src/vtr_logic.h
+++ b/libs/libvtrutil/src/vtr_logic.h
@@ -1,6 +1,19 @@
 #ifndef VTR_LOGIC_H
 #define VTR_LOGIC_H
 
+#ifdef FALSE
+#undef FALSE
+#endif
+#define FALSE FALSE
+
+#ifdef TRUE
+#undef TRUE
+#endif
+#define TRUE TRUE
+
+constexpr int FALSE = 0;
+constexpr int TRUE = 1;
+
 namespace vtr {
 
 enum class LogicValue {
diff --git a/libs/libvtrutil/src/vtr_small_vector.h b/libs/libvtrutil/src/vtr_small_vector.h
index 86f367f24..ce9540bc5 100644
--- a/libs/libvtrutil/src/vtr_small_vector.h
+++ b/libs/libvtrutil/src/vtr_small_vector.h
@@ -4,6 +4,7 @@
 #include <algorithm>
 #include <limits>
 #include <cstdint>
+#include <array>
 #include "vtr_assert.h"
 
 namespace vtr {
diff --git a/libs/libvtrutil/src/vtr_string_interning.h b/libs/libvtrutil/src/vtr_string_interning.h
index 9574a832c..e8beac041 100644
--- a/libs/libvtrutil/src/vtr_string_interning.h
+++ b/libs/libvtrutil/src/vtr_string_interning.h
@@ -47,6 +47,7 @@
 #include <stdexcept>
 #include <climits>
 #include <algorithm>
+#include <array>
 
 #include "vtr_strong_id.h"
 #include "vtr_string_view.h"
diff --git a/vpr/src/route/gen/rr_graph_uxsdcxx.h b/vpr/src/route/gen/rr_graph_uxsdcxx.h
index 68e28dac6..8de5cf7f6 100644
--- a/vpr/src/route/gen/rr_graph_uxsdcxx.h
+++ b/vpr/src/route/gen/rr_graph_uxsdcxx.h
@@ -20,7 +20,6 @@
 #include <string>
 #include <vector>
 
-#include <error.h>
 #include <stddef.h>
 #include <stdint.h>
 #include "pugixml.hpp"
diff --git a/vpr/src/timing/timing_util.cpp b/vpr/src/timing/timing_util.cpp
index 522946304..b200964ae 100644
--- a/vpr/src/timing/timing_util.cpp
+++ b/vpr/src/timing/timing_util.cpp
@@ -29,7 +29,7 @@ tatum::TimingPathInfo find_longest_critical_path_delay(const tatum::TimingConstr
 
     //Record the maximum critical path accross all domain pairs
     for (const auto& path_info : cpds) {
-        if (crit_path_info.delay() < path_info.delay() || std::isnan(crit_path_info.delay())) {
+        if (crit_path_info.delay() < path_info.delay() || std::isnan(float(crit_path_info.delay()))) {
             crit_path_info = path_info;
         }
     }
@@ -46,7 +46,7 @@ tatum::TimingPathInfo find_least_slack_critical_path_delay(const tatum::TimingCo
 
     //Record the maximum critical path accross all domain pairs
     for (const auto& path_info : cpds) {
-        if (path_info.slack() < crit_path_info.slack() || std::isnan(crit_path_info.slack())) {
+        if (path_info.slack() < crit_path_info.slack() || std::isnan(float(crit_path_info.slack()))) {
             crit_path_info = path_info;
         }
     }
